#!/bin/bash
# Gerenciador Simples de Ambientes AnythingLLM
# Vers√£o enxuta sem Ollama - APIs online apenas

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para mostrar uso
show_usage() {
    echo -e "${BLUE}üõ†Ô∏è  AnythingLLM - Gerenciador Simples${NC}"
    echo ""
    echo "Uso: $0 [comando]"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  setup        - Setup inicial completo"
    echo "  dev          - Iniciar desenvolvimento"
    echo "  dev-docker   - Desenvolvimento com Docker"
    echo "  prod-local   - Testar produ√ß√£o localmente"
    echo "  status       - Verificar status dos servi√ßos"
    echo "  stop         - Parar todos os servi√ßos"
    echo "  logs         - Ver logs dos servi√ßos"
    echo "  clean        - Limpeza b√°sica"
    echo ""
    echo "Exemplos:"
    echo "  $0 setup     # Configura√ß√£o inicial (execute uma vez)"
    echo "  $0 dev       # Desenvolvimento di√°rio"
    echo "  $0 status    # Verificar se tudo est√° OK"
}

# Fun√ß√£o para verificar depend√™ncias b√°sicas
check_deps() {
    local missing=()

    if ! command -v yarn &> /dev/null; then
        missing+=("yarn")
    fi

    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${RED}‚ùå Depend√™ncias faltando: ${missing[*]}${NC}"
        echo "Instale as depend√™ncias antes de continuar."
        exit 1
    fi
}

# Fun√ß√£o para setup inicial
setup_env() {
    echo -e "${BLUE}üöÄ Setup inicial AnythingLLM...${NC}"

    if [ -f "scripts/setup-simple.sh" ]; then
        bash scripts/setup-simple.sh
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Script de setup n√£o encontrado, executando setup manual...${NC}"
        yarn setup
        yarn prisma:setup
        echo -e "${GREEN}‚úÖ Setup conclu√≠do! Configure sua API key em server/.env.development${NC}"
    fi
}

# Fun√ß√£o para desenvolvimento
start_dev() {
    echo -e "${BLUE}üîß Iniciando desenvolvimento...${NC}"

    # Verificar se API key est√° configurada
    if grep -q "sk-your-openai-api-key-here" server/.env.development 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  API key n√£o configurada!${NC}"
        echo "Configure sua API key em server/.env.development antes de continuar."
        echo "Substitua: OPEN_AI_KEY=sk-your-openai-api-key-here"
        return 1
    fi

    # Get configured ports
    local server_port=$(grep "^SERVER_PORT=" server/.env.development 2>/dev/null | cut -d= -f2 || echo "3002")
    local frontend_port=$((server_port - 1))

    echo "üåê Iniciando servi√ßos..."
    echo "- Server: http://localhost:$server_port"
    echo "- Frontend: http://localhost:$frontend_port"
    echo "- API: http://localhost:$server_port/api"
    echo "- Collector: port 8888"
    echo ""

    # Abrir terminais separados no macOS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Abrindo terminais automaticamente..."
        osascript -e 'tell app "Terminal" to do script "cd \"'$(pwd)'\" && yarn dev:server"'
        sleep 1
        osascript -e 'tell app "Terminal" to do script "cd \"'$(pwd)'\" && yarn dev:frontend"'
        sleep 1
        osascript -e 'tell app "Terminal" to do script "cd \"'$(pwd)'\" && yarn dev:collector"'
        echo -e "${GREEN}‚úÖ Terminais abertos. Use Ctrl+C em cada um para parar.${NC}"
    else
        echo "Execute em terminais separados:"
        echo "1. yarn dev:server"
        echo "2. yarn dev:frontend"
        echo "3. yarn dev:collector"
    fi
}

# Fun√ß√£o para Docker desenvolvimento
start_dev_docker() {
    echo -e "${BLUE}üê≥ Iniciando desenvolvimento com Docker...${NC}"

    if [ ! -f "docker-compose.light.yml" ]; then
        echo -e "${RED}‚ùå docker-compose.light.yml n√£o encontrado${NC}"
        echo "Criando configura√ß√£o b√°sica..."
        create_light_docker_compose
    fi

    docker-compose -f docker-compose.light.yml up -d
    echo -e "${GREEN}‚úÖ Container iniciado${NC}"
    echo "üåê Acesse: http://localhost:3001"
}

# Fun√ß√£o para criar docker-compose leve
create_light_docker_compose() {
    cat > docker-compose.light.yml << 'EOF'
version: '3.8'

services:
  anythingllm:
    build: .
    container_name: anythingllm-light
    ports:
      - "3001:3001"
    volumes:
      - "./server/.env.development:/app/server/.env"
      - "./server/storage:/app/server/storage"
    environment:
      - STORAGE_DIR=/app/server/storage
    restart: unless-stopped
EOF
    echo "‚úÖ docker-compose.light.yml criado"
}

# Fun√ß√£o para produ√ß√£o local
start_prod_local() {
    echo -e "${BLUE}üè≠ Testando produ√ß√£o localmente...${NC}"

    if [ ! -f "docker-compose.production.yml" ]; then
        echo -e "${RED}‚ùå docker-compose.production.yml n√£o encontrado${NC}"
        exit 1
    fi

    docker-compose -f docker-compose.production.yml --profile production up -d
    echo -e "${GREEN}‚úÖ Ambiente de produ√ß√£o local iniciado${NC}"
    echo "üåê Acesse: http://localhost:3001"
}

# Fun√ß√£o para verificar status
check_status() {
    echo -e "${BLUE}üìä Status dos servi√ßos...${NC}"

    # Get configured ports
    local server_port=$(grep "^SERVER_PORT=" server/.env.development 2>/dev/null | cut -d= -f2 || echo "3002")
    local frontend_port=$((server_port - 1))

    # Verificar Server API
    if curl -s http://localhost:$server_port/api/ping > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Server API: Online (port $server_port)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Server API: Offline (port $server_port)${NC}"
    fi

    # Verificar Frontend
    if curl -s http://localhost:$frontend_port > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Frontend: Online (port $frontend_port)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Frontend: Offline (port $frontend_port)${NC}"
    fi

    # Verificar Collector
    if curl -s http://localhost:8888/ping > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Collector: Online (port 8888)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Collector: Offline (port 8888)${NC}"
    fi

    # Verificar se API key est√° configurada
    if [ -f "server/.env.development" ]; then
        if grep -q "sk-your-openai-api-key-here" server/.env.development; then
            echo -e "${YELLOW}‚ö†Ô∏è  API Key: N√£o configurada${NC}"
        else
            echo -e "${GREEN}‚úÖ API Key: Configurada${NC}"
        fi
    fi

    # Verificar processos Node.js
    echo ""
    echo "‚öôÔ∏è  Processos Node.js:"
    local node_processes=$(ps aux | grep -E "(yarn dev|nodemon.*index.js)" | grep -v grep | wc -l)
    if [ "$node_processes" -gt 0 ]; then
        echo -e "${GREEN}   ‚Ä¢ $node_processes processos de desenvolvimento rodando${NC}"
    else
        echo -e "${YELLOW}   ‚Ä¢ Nenhum processo de desenvolvimento detectado${NC}"
    fi

    # Verificar containers Docker
    echo ""
    echo "üê≥ Containers:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep anythingllm || echo "Nenhum container AnythingLLM rodando"
}

# Fun√ß√£o para parar servi√ßos
stop_services() {
    echo -e "${YELLOW}üõë Parando servi√ßos...${NC}"

    # Parar containers Docker
    docker-compose -f docker-compose.light.yml down 2>/dev/null || true
    docker-compose -f docker-compose.production.yml down 2>/dev/null || true

    # Parar processos Node.js
    pkill -f "yarn dev" 2>/dev/null || true
    pkill -f "nodemon" 2>/dev/null || true

    echo -e "${GREEN}‚úÖ Servi√ßos parados${NC}"
}

# Fun√ß√£o para ver logs
show_logs() {
    echo -e "${BLUE}üìã Logs dos servi√ßos...${NC}"

    if docker ps | grep -q anythingllm; then
        docker logs --tail 50 -f $(docker ps | grep anythingllm | awk '{print $1}')
    else
        echo "Nenhum container AnythingLLM rodando"
        echo "Use: $0 dev-docker para iniciar com Docker"
    fi
}

# Fun√ß√£o para limpeza b√°sica
clean_env() {
    echo -e "${YELLOW}üßπ Limpeza b√°sica...${NC}"

    # Parar servi√ßos
    stop_services

    # Remover containers parados
    docker container prune -f 2>/dev/null || true

    # Limpar node_modules se necess√°rio
    read -p "Limpar node_modules? [y/N]: " clean_modules
    if [[ $clean_modules =~ ^[Yy]$ ]]; then
        echo "Removendo node_modules..."
        rm -rf server/node_modules collector/node_modules frontend/node_modules
        echo "Execute 'yarn setup' para reinstalar."
    fi

    echo -e "${GREEN}‚úÖ Limpeza conclu√≠da${NC}"
}

# Processar comando
case "${1:-}" in
    setup)
        check_deps
        setup_env
        ;;
    dev)
        check_deps
        start_dev
        ;;
    dev-docker)
        check_deps
        start_dev_docker
        ;;
    prod-local)
        check_deps
        start_prod_local
        ;;
    status)
        check_status
        ;;
    stop)
        stop_services
        ;;
    logs)
        show_logs
        ;;
    clean)
        check_deps
        clean_env
        ;;
    *)
        show_usage
        ;;
esac