import { chromium } from 'playwright';

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  // Capturar logs do console
  page.on('console', msg => {
    if (msg.text().includes('üîç DEBUG') || msg.text().includes('Toggle subitem') || msg.text().includes('Configura√ß√µes salvas')) {
      console.log('üîç CONSOLE LOG:', msg.text());
    }
  });

  try {
    console.log('üöÄ Navegando para a aplica√ß√£o...');
    await page.goto('http://localhost:3000');
    await page.waitForTimeout(2000);

    console.log('üîê Fazendo login...');
    // Tentar encontrar campos de login
    const usernameField = await page.locator('input[type="text"], input[name="username"], input[placeholder*="user"]').first();
    const passwordField = await page.locator('input[type="password"]').first();
    const loginButton = await page.locator('button[type="submit"], button:has-text("Login"), button:has-text("Entrar")').first();

    await usernameField.fill('jholy');
    await passwordField.fill('Jholy1234tuna');
    await loginButton.click();
    await page.waitForTimeout(3000);

    console.log('üìã Verificando estado inicial do menu...');
    // Ir direto para o sidebar
    const aiProvidersMenu = await page.locator('text=AI Providers').first();
    if (await aiProvidersMenu.isVisible()) {
      console.log('‚úÖ AI Providers menu encontrado');
      await aiProvidersMenu.click();
      await page.waitForTimeout(1000);

      const llmItem = await page.locator('text=LLM').first();
      const llmVisible = await llmItem.isVisible();
      console.log('üëÅÔ∏è LLM atualmente vis√≠vel:', llmVisible);
    }

    console.log('‚öôÔ∏è Navegando para Menu Visibility...');
    await page.goto('http://localhost:3000/settings/menu-visibility');
    await page.waitForTimeout(3000);

    console.log('üîç Verificando p√°gina de configura√ß√£o...');
    const pageTitle = await page.locator('text=Visibilidade do Menu Admin').first();
    if (await pageTitle.isVisible()) {
      console.log('‚úÖ P√°gina de configura√ß√£o carregada');
    } else {
      console.log('‚ùå P√°gina de configura√ß√£o n√£o encontrada');
      await page.screenshot({ path: 'debug-menu-visibility.png' });
    }

    console.log('üéØ Procurando se√ß√£o AI Providers...');
    const aiProvidersSection = await page.locator('text=AI Providers').first();
    if (await aiProvidersSection.isVisible()) {
      console.log('‚úÖ Se√ß√£o AI Providers encontrada');

      console.log('üîç Procurando toggle do LLM...');
      // Procurar pelo elemento clic√°vel correto (o div do toggle)
      const llmToggleDiv = await page.locator('text=LLM').locator('..').locator('..').locator('div[class*="w-9 h-5"]').first();
      const llmCheckbox = await page.locator('text=LLM').locator('..').locator('..').locator('input[type="checkbox"]').first();

      if (await llmToggleDiv.isVisible()) {
        const isChecked = await llmCheckbox.isChecked();
        console.log('üéõÔ∏è Estado atual do toggle LLM:', isChecked ? 'ATIVO' : 'INATIVO');

        console.log('üñ±Ô∏è Clicando no toggle LLM (div clic√°vel)...');
        await llmToggleDiv.click();
        await page.waitForTimeout(2000);

        const newState = await llmCheckbox.isChecked();
        console.log('üéõÔ∏è Novo estado do toggle LLM:', newState ? 'ATIVO' : 'INATIVO');

        console.log('üîô Testando no menu lateral...');
        // Tentar ir para uma p√°gina com menu lateral
        await page.goto('http://localhost:3000/settings/llm-preference');
        await page.waitForTimeout(2000);

        const sidebarLlm = await page.locator('text=LLM').first();
        const llmStillVisible = await sidebarLlm.isVisible();
        console.log('üëÅÔ∏è LLM ainda vis√≠vel no menu:', llmStillVisible);

      } else {
        console.log('‚ùå Toggle LLM n√£o encontrado');

        // Debug: Capturar HTML da p√°gina para an√°lise
        const pageHTML = await page.content();
        console.log('üìÑ Salvando HTML para debug...');
        import('fs').then(fs => {
          fs.writeFileSync('/Users/vcg/development/JHOLY/gpt_jholy/frontend/debug-page.html', pageHTML);
        });

        await page.screenshot({ path: '/Users/vcg/development/JHOLY/gpt_jholy/frontend/debug-llm-toggle.png' });

        // Verificar se existe algum LLM na p√°gina
        const allLLMTexts = await page.locator('text=LLM').count();
        console.log('üîç Textos "LLM" encontrados na p√°gina:', allLLMTexts);

        // Verificar se AI Providers tem subitens
        const aiProvidersText = await page.locator('text=AI Providers').textContent();
        console.log('üìù Texto da se√ß√£o AI Providers:', aiProvidersText);
      }
    } else {
      console.log('‚ùå Se√ß√£o AI Providers n√£o encontrada');
    }

    console.log('üìä Verificando localStorage...');
    const localStorage = await page.evaluate(() => {
      return window.localStorage.getItem('anythingllm_menu_visibility_settings');
    });
    console.log('üíæ LocalStorage:', localStorage);

    await page.waitForTimeout(5000);

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    await page.screenshot({ path: 'debug-error.png' });
  } finally {
    await browser.close();
  }
})();