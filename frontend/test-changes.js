import { chromium } from 'playwright';

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    console.log('üîß Testando remo√ß√£o da legenda e nome do Branding...');
    await page.goto('http://localhost:3000');
    await page.waitForTimeout(2000);

    console.log('üîê Fazendo login...');
    const usernameField = await page.locator('input[type="text"]').first();
    const passwordField = await page.locator('input[type="password"]').first();
    const loginButton = await page.locator('button[type="submit"]').first();

    await usernameField.fill('jholy');
    await passwordField.fill('Jholy1234tuna');
    await loginButton.click();
    await page.waitForTimeout(3000);

    console.log('‚öôÔ∏è Navegando para Menu Visibility...');
    await page.goto('http://localhost:3000/settings/menu-visibility');
    await page.waitForTimeout(3000);

    console.log('üîç Verificando se legenda foi removida...');
    const legend = await page.locator('text=Como funciona a hierarquia').count();
    console.log('üìã Legenda "Como funciona a hierarquia":', legend > 0 ? 'AINDA EXISTE ‚ùå' : 'REMOVIDA ‚úÖ');

    const legendBox = await page.locator('text=üí°').count();
    console.log('üì¶ Box da legenda:', legendBox > 0 ? 'AINDA EXISTE ‚ùå' : 'REMOVIDO ‚úÖ');

    console.log('üîç Verificando nome do Branding...');
    const brandingText = await page.locator('text=Branding e White Label').count();
    console.log('üè∑Ô∏è "Branding e White Label":', brandingText > 0 ? 'ENCONTRADO ‚úÖ' : 'N√ÉO ENCONTRADO ‚ùå');

    const oldBrandingText = await page.locator('text=Marca e Etiqueta Branca').count();
    console.log('üè∑Ô∏è "Marca e Etiqueta Branca" (antigo):', oldBrandingText > 0 ? 'AINDA EXISTE ‚ùå' : 'REMOVIDO ‚úÖ');

    console.log('');
    console.log('üéØ RESULTADO DAS ALTERA√á√ïES:');
    if (legend === 0 && brandingText > 0) {
      console.log('‚úÖ Ambas altera√ß√µes foram aplicadas com sucesso!');
    } else {
      console.log('‚ö†Ô∏è Algumas altera√ß√µes podem n√£o ter sido aplicadas completamente');
    }

    await page.waitForTimeout(5000);

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await browser.close();
  }
})();